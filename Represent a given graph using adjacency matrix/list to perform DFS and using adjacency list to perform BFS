//  Represent a given graph using adjacency matrix/list to
perform DFS and using adjacency list to perform BFS. Use the map of the area
around the college as the graph. Identify the prominent land marks as nodes
and perform DFS and BFS on that.


#include <iostream>
using namespace std;
int adj_mat[10][10], i, j, k, n, qu[10], front, rear, v, visit[10], visited[10];
int stk[10], top, visit1[10], visited1[10];
void BFS(int n){
int v,k;
int visited[n];
int qu[n];
cout<<"Enter initial vertex";
cin>>v;
cout<<"The BFS of the graph is"<<endl;
cout<<v<<endl;
visited[v] = 1;
k = 1;
while(k < n){
for(int j = 1; j <= n; j++){
if(adj_mat[v][j] != 0 && visited[j] != 1){
qu[rear++] = j;
}
}
v = qu[front++];
cout<<v<<endl;
k++;
}
cout<<"The DFS of the graph is"<<endl;
cout<<v<<endl;
visited[v] = 1;
k = 1;
while(k < n){
for(int j = n; j >= 1; j--)
if(adj_mat[v][j] != 0 && visited[j] != 1){
visited[j] = 1;
stk[top] = j;
top++;
}
v = stk[--top];
cout<<v<<" "<<endl;
k++;
visit1[v]=0;
visited[v]=1;
}
};
int main(){
 int m;
 cout << "Enter number of vertices : ";
 cin >> n;
 cout << "Enter number of edges : ";
 cin >> m;

 cout << "\nEDGES :\n";
 for (k = 1; k <= m; k++)
 {
 cin >> i >> j;
 adj_mat[i][j] = 1;
 adj_mat[j][i] = 1;
 }

 cout << "The adjacency matrix of the graph is : " << endl;
 for (i = 0; i < n; i++)
 {
 for (j = 0; j < n; j++)
 {
 cout << " " << adj_mat[i][j];
 }
 cout << endl;
 }
 BFS(n);

 return 0;
}
