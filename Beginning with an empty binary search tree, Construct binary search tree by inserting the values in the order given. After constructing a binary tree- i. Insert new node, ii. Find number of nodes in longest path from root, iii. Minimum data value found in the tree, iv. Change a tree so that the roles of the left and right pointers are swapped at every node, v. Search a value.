//Beginning with an empty binary search tree, Construct
binary search tree by inserting the values in the order given. After constructing
a binary tree- i. Insert new node, ii. Find number of nodes in longest path from
root, iii. Minimum data value found in the tree, iv. Change a tree so that the
roles of the left and right pointers are swapped at every node, v. Search a value.



#include<iostream>
using namespace std;
struct node
{
 int a;
 node *left, *right;
};
class bt
{
 node *root=NULL, *temp=NULL, *t1=NULL, *s=NULL, *t=NULL;
 int count;
public:
 bt()
 {
 count = 0;
 }
 node *create(); // node is taken because it will return address
 void insert();
 void display();
 void disp(node *q);
 void find();
 void height();
 int he(node *q,int c);
 void search();
 void del();
};
node* bt::create()
{
 node *p = new node;
 p->left = NULL;
 p->right = NULL;
 cout << "enter data : ";
 cin >> p->a;
 return p;
}
void bt::insert()
{
 temp = create();
 if (root == NULL)
 root = temp;
 else
 {
 t1 = root;
 while (t1 != NULL)
 {
 s = t1;
 if ((temp->a) > (t1->a))
 t1 = t1->right;
 else
 t1 = t1->left;
 }
 if ((temp->a) > (s->a))
 s->right = temp;
 else
 s->left = temp;
 }

}
void bt::search ()
{ int m,f=0;
 cout<<"enter a number"<<endl;
 cin>>m;
if(root==NULL)
cout<<"Tree is empty "<<endl;
else
{
t1=root;
if(t1->a==m)
cout<<"data found "<<endl;
else
{
while(t1->a!=m)
{
if(t1->a<m)
t1=t1->right;
else
t1=t1->left;
if(t1==NULL)
{
cout<<"data not found"<<endl; f=1; break;
}
}
if(f==0)
cout<<"data found "<<endl;
}
}
}
void bt::del(node *t,int x)
{
int x;
cout<<"enter data to be dleted "<endl;
cin>>x;
delete(root,x);
}
void bt :: delete()
{
if(t==NULL)
{
cout<<"data not found"<<endl;
return(t);
}
if(x<t->a)
{
t->left=delete(t->left,x);
}
}
void bt::disp(node *q)
{
cout<<q->a;
if(q->left!=NULL){
cout<<"\nLeft element : ",disp(q->left);
}
if(q->right!=NULL){
cout<<"\nRight element : ",disp(q->right);
}
}
void bt:: display()
{
if(root==NULL)
cout<<"tree not exist"<<endl;
else
{cout<<"Root : ",disp(root);
cout<<endl;
}
}
void bt:: find()
{
if(root==NULL)
cout<<"tree is empty"<<endl;
else
{
t1 = root;
 while (t1->right != NULL)
 {
 t1=t1->right;

 }
 cout<<"max :"<<t1->a<<endl;
t1=root;
 while (t1->left != NULL)
 {
 t1=t1->left;

 }
 cout<<"min :"<<t1->a<<endl;
}
}
void bt::height()
{
count=0;
if(root==NULL)
{
 cout<<"tree not exist";
}
else
{
 he(root,0);
 cout<<"height is :"<<count;
}
}
int bt :: he(node *q,int c)
{
 c++;
 if(q->left!=NULL)
 {
 he(q->left,c);
 }
 if(q->right!=NULL)
 { count++;
 he(q->right,c);
 }
 if(count<c)
 {
 count=c;
 }
 return 0;
}
int main()
{
int ch,x;
bt obj;
do
{
cout<<"\nchoices:\n1.Insertion\n2.Display\n3.find\n4.height\n5.search\n6
.delete\n";
cout<<"Enter your choice : ";
cin>>ch;
cout<<endl;
switch(ch)
{
case 1:
obj.insert();
break;
case 2:
obj.display();
cout<<endl;
break;
case 3:
obj.find();
break;
case 4:
obj.height();
break;
case 5:
obj.search();
break;
case 6:
obj.del();
break;
}
}
while(ch!=7);
}
