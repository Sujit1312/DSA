//Consider telephone book database of N clients. Make
//use of a hash table implementation to quickly look up client's telephone
//number. Make use of two collision handling techniques and compare them
//using number of comparisons required to find a set of telephone numbers 

#include<iostream>
#include<string>
using namespace
std; class node{
private: string name;
int id; long int tel;
friend class hashing;
public: node(){ id =
0; tel = 0;
} }; class
hashing{
private: node
data[100]; int
index; public:
void create_record(int size, string n, int i, long int
t){ index = i % size; for(int j = 0; j < size; j++){ if
(data[index].id == 0){ data[index].name = n;
data[index].id = i;
data[index].tel = t;
break; } else{ index =
(index + 1) % size;
cout<<"collision occured!
";
} }
cout<<"Record Successfully Created"<<endl;
}
void delete_record(int size, int
i){ int flag = 0; index = i % size;
for(int j = 0; j < size; j++){ if(i
== data[index].id){ flag = 1;
data[index].id = 0;
data[index].name = " ";
data[index].tel = 0; break; }
else{
index = (index + 1) % size;
} } if (flag ==
0){
cout<<"Data not Found"<<endl;
} }
void modify_record(int size, int old_id, int new_id, string n, long int
t){ index = old_id % size; int flag = 0; for(int j = 0; j < size; j++){
if(old_id == data[index].id){ flag = 1; data[index].id = new_id;
data[index].name = n;
data[index].tel = t;
cout<<"Record Succesfully
Updated"<<endl; break; } else{
index = (index + 1) % size;
} } if (flag ==
0){
cout<<"Data not Found"<<endl;
} } void search_record(int size){
int index, key, flag = 0;
cout<<"Enter id to be
searched:";
cin>>key; index = key % size; for(int j
= 0; j < size; j++){ if(data[index].id ==
key){ flag = 1; cout<<"\nRecord
Found:"; cout<<"\n\t ID \tNAME
\tTELEPONE";
cout<<"\n\t "<<data[index].id<<"\t"<<data[index].name<<"\t"
<<data[index].tel
; break; } else{
index = (index + 1) % size;
} } if (flag ==
0){
cout<<"Data not Found"<<endl;
} }
void display(int size){ cout<<"\n\t ID
\tNAME \tTELEPONE";
for(int j = 0; j < size; j++){
if(data[j].id != 0){
cout<<"\n\t "<<data[j].id<<"\t"<<data[j].name<<"\t"<<data[j].tel;
}
}
} }; int main(){
int ch, i, size =
10; string n; long
int t;
hashing h; //obj of hashing class
while(1){ cout<<"\nPhone Directory
\n"<<endl; cout<<"1. Create
Record"<<endl; cout<<"2. Delete
Record"<<endl; cout<<"3. Modify
Record"<<endl; cout<<"4. Search
Record"<<endl; cout<<"5. Display
Record"<<endl; cout<<"6.
Exit"<<endl; cin>>ch;
switch(ch){ case 1:
cout<<"\n"; cout<<"Enter
your name: "; cin>>n;
cout<<"Enter ID:"; cin>>i;
cout<<"Enter Telephone no.:";
cin>>t;
h.create_record(size, n, i, t);
break;
case 2 :
cout<<"Enter ID you want to delete:"<<endl;
cin>>i;
h.delete_record(size, i); break;
case 3: int old_id, new_id;
cout<<"Enter ID to modify:";
cin>>old_id; cout<<"Enter
name:"; cin>>n; cout<<"Enter
new ID:"; cin>>new_id;
cout<<"Enter Telephone
number:"; cin>>t;
h.modify_record(size, old_id, new_id, n,
t); break; case 4:
h.search_record(size)
; break; case 5:
h.display(size); break; case 6: exit(0); default:
cout<<"Invalid Entry please try
again........"<<endl;
} }
return
0;
} 
